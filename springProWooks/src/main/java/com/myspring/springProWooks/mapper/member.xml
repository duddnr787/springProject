<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myspring.springProWooks.mapper.MemberDAO">
<!-- 리절트 맵 정의 -->	
	<resultMap id="memberResult" type="com.myspring.springProWooks.entity.MemberVO">
		<result property="member_id" column="member_id" />
		<result property="member_pw" column="member_pw" />
		<result property="member_name" column="member_name" />
		<result property="member_gender" column="member_gender" />
		
		<result property="member_birth_y" column="member_birth_y" />
		<result property="member_birth_m" column="member_birth_m" />
		<result property="member_birth_d" column="member_birth_d" />
		
		<result property="member_birth_gn" column="member_birth_gn" />
		<result property="tel1" column="tel1" />
		<result property="tel2" column="tel2" />
		<result property="tel3" column="tel3" />
		
		<result property="hp1" column="hp1" />
		<result property="hp2" column="hp2" />
		<result property="hp3" column="hp3" />
		<result property="smssts_yn" column="smssts_yn" />
		<result property="email1" column="email1" />
		<result property="email2" column="email2" />
		<result property="emailsts_yn" column="emailsts_yn" />
		
		<result property="zipcode" column="zipcode" />
		<result property="roadAddress" column="roadAddress" />
		<result property="jibunAddress" column="jibunAddress" />
		<result property="namujiAddress" column="namujiAddress" />
		<result property="joinDate" column="joinDate" />
	</resultMap>	

	<select id="login" resultType="com.myspring.springProWooks.entity.MemberVO"  parameterType="java.util.HashMap"  >
			select * from shopping_member 
			 where member_id=#{id} 
	</select>
	
	<select id="findMember" resultType="com.myspring.springProWooks.entity.MemberVO"  parameterType="java.util.HashMap"  >
			select * from shopping_member where email1 = #{email1} and email2 = #{email2} and member_name = #{name} 
	</select>
	
	<update id="editUser">
			update shopping_member set member_pw = #{pwd}, member_name = #{name} , tel1 = #{tel1} , tel2 = #{tel2} , tel3 = #{tel3}
			, hp1 = #{hp1} , hp2 = #{hp2} , hp3 = #{hp3} , member_birth_gn = #{member_birth_gn}
			, email1 = #{email1} , email2 = #{email2} , member_birth_y = #{member_birth_y} , member_birth_m = #{member_birth_m} 
			, member_birth_d = #{member_birth_d} , zipcode = #{zipcode} , roadAddress = #{roadAddress} , jibunAddress = #{jibunAddress}
			, namujiAddress = #{namujiAddress} 
			 where member_id = #{id}
	</update>
	
	<select id="selectOverlappedID" parameterType="String" resultType="String">
   	   select case count(*) when 1 then  'true'  when 0 then  'false' end
	   from shopping_member
	   where member_id = #{id}
	</select>
	
	<select id="checkPwd" parameterType="java.util.Map" resultType="String">
   	   select case count(*) when 1 then  'true'  when 0 then  'false' end
	   from shopping_member
	   where member_id = #{id} and member_pw = #{pwd}
	</select>
	
  <insert id="insertNewMember" >
    	insert into shopping_member(member_id,
				 					 member_pw,
                                     member_name,
                                     member_gender,
                                     member_birth_y,
                                     member_birth_m,
                                     member_birth_d,
                                     member_birth_gn,
                                     tel1,
                                     tel2,
                                     tel3,
                                     hp1,
                                     hp2,
                                     hp3,
                                     smssts_yn,
                                     email1,
                                     email2,
                                     emailsts_yn,
                                     zipcode,
                                     roadAddress,
                                     jibunAddress,
                                     namujiAddress)
							 values(#{id},
									#{pwd},
									#{name},
                                 	#{gender},
                                   	#{member_birth_y},
                                   	#{member_birth_m},
                                    #{member_birth_d},
                                    #{member_birth_gn},
                                    #{tel1},
                                    #{tel2},
                                    #{tel3},
                                    #{hp1},
                                    #{hp2},
                                    #{hp3},
                                    #{smssts_yn},
                                    #{email1},
                                    #{email2},
                                    #{emailsts_yn},
                                    #{zipcode},
                                    #{roadAddress},
                                    #{jibunAddress},
                                    #{namujiAddress})    
  </insert>
  
  <delete id="deleteUser">
  	delete from shopping_member where member_pw = #{pwd}
  </delete>
  
  	<select id="memberList" resultMap="memberResult"   >
         select * from shopping_member
	</select>
	
	<update id="permitUser">
			update shopping_member set permit = #{permit}
			 where member_id = #{member_id}
	</update>
</mapper>